// class Solution {
//     public long subArrayRanges(int[] nums) {
//         int n = nums.length;
//         long result = 0;
//         for(int i=0;i<n;i++){
//             int min = nums[i];
//             int max = nums[i];
//             int range = 0;
//             for(int j=i;j<n;j++){
//                 min = Math.min(min,nums[j]);
//                 max = Math.max(max,nums[j]);
//                 range = max-min;
//                 result += range;
//             }
//         }
//         return result;
//     }
// }


class Solution {
    public int[] findNGE(int[] arr){
        int n = arr.length;
        int[] nge = new int[n];
        Stack<Integer> st = new Stack<>();

        for(int i=n-1;i>=0;i--){
            while(!st.isEmpty() && arr[st.peek()] < arr[i]){
                st.pop();
            }
            nge[i] = st.isEmpty() ? n:st.peek();
            st.push(i);
        }
        return nge;
    }
    public int[] findPGE(int[] arr){
        int n = arr.length;
        int[] pge = new int[n];
        Stack<Integer> st = new Stack<>();

        for(int i=0;i<n;i++){
            while(!st.isEmpty() && arr[st.peek()] <= arr[i]){
                st.pop();
            }
            pge[i] = st.isEmpty() ? -1:st.peek();
            st.push(i);
        }
        return pge;
    }
    public int[] findNSE(int[] arr){
        int n = arr.length;
        int[] nse = new int[n];
        Stack<Integer> st = new Stack<>();

        for(int i=n-1;i>=0;i--){
            while(!st.isEmpty() && arr[st.peek()] >= arr[i]){
                st.pop();
            }
            nse[i] = st.isEmpty() ? n:st.peek();
            st.push(i);
        }
        return nse;
    }
    public int[] findPSE(int[] arr){
        int n = arr.length;
        int[] pse = new int[n];
        Stack<Integer> st = new Stack<>();

        for(int i=0;i<n;i++){
            while(!st.isEmpty() && arr[st.peek()] > arr[i]){
                st.pop();
            }
            pse[i] = st.isEmpty() ? -1:st.peek();
            st.push(i);
        }
        return pse;
    }
    public long subArrayMax(int[] arr){
        int[] nge = findNGE(arr);
        int[] pge = findPGE(arr);
        long total = 0;
        for(int i=0;i<arr.length;i++){
            int left = i - pge[i];
            int right = nge[i] - i;
            total += (long)left * right * arr[i];
        }
        return total;
    }
    public long subArrayMin(int[] arr){
        int[] nse = findNSE(arr);
        int[] pse = findPSE(arr);
        long total = 0;
        for(int i=0;i<arr.length;i++){
            int left = i - pse[i];
            int right = nse[i] - i;
            total += (long)left * right * arr[i]; 
        }
        return total;
    }
    public long subArrayRanges(int[] nums) {
        long result = subArrayMax(nums) - subArrayMin(nums);
        return result;
    }
}
